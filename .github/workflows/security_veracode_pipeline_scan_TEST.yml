name: Security veracode pipeline scan

on:
  workflow_call:
    inputs:
      channel_id:
        required: false
        default: 'NO_SLACK'
        type: string
    secrets:
      SLACK_BOT_TOKEN:
        description: Slack bot token
        required: true
      VERACODE_API_ID_0:
        description: Veracode app secret
        required: true
      VERACODE_API_ID_1:
        description: Veracode app secret
        required: true
      VERACODE_API_ID_2:
        description: Veracode app secret
        required: true
      VERACODE_API_ID_3:
        description: Veracode app secret
        required: true
      VERACODE_API_ID_4:
        description: Veracode app secret
        required: true
      VERACODE_API_KEY_0:
        description: Veracode app secret
        required: true
      VERACODE_API_KEY_1:
        description: Veracode app secret
        required: true
      VERACODE_API_KEY_2:
        description: Veracode app secret
        required: true
      VERACODE_API_KEY_3:
        description: Veracode app secret
        required: true
      VERACODE_API_KEY_4:
        description: Veracode app secret
        required: true

permissions:
  contents: read

jobs:
  security-veracode-pipeline-scan:
    name: Security veracode pipeline scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    env:
      docker_image_app_dir: "/app"
      additional_docker_build_args: ""
      jdk_tag: "17.0"
      java_options: "-Xmx1024m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process"

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
    - name: prepare assets
      uses: ministryofjustice/hmpps-github-actions/.github/actions/security_veracode_prepare_artifacts@0.2 # WORKFLOW_VERSION
    - name: "Download/Extract pipeline scanner"
      shell: bash
      run: |
          wget https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip -O pipeline-scan.zip
          unzip pipeline-scan.zip -x README.md
    - name: "Download Veracode Policy"
      shell: bash
      run: |
          echo "Randomly picking 1 of 5 api keys, to help avoid veracode API rate limits."
          X=$(( RANDOM % 4 ))
          VERACODE_API_ID_X="VERACODE_API_ID_${X}"
          VERACODE_API_KEY_X="VERACODE_API_KEY_${X}"
          VERACODE_API_ID="${!VERACODE_API_ID_X}"
          VERACODE_API_KEY="${!VERACODE_API_KEY_X}"
          echo "Using VERACODE_API_ID_${X} from pool (${VERACODE_API_ID:0:5}...)"
          java -jar pipeline-scan.jar \
          --request_policy "Ministry of Justice" \
          --veracode_api_id "${VERACODE_API_ID}" \
          --veracode_api_key "${VERACODE_API_KEY}" 
      env:
        VERACODE_API_ID_0: ${{ secrets.VERACODE_API_ID_0 }}
        VERACODE_API_ID_1: ${{ secrets.VERACODE_API_ID_1 }}
        VERACODE_API_ID_2: ${{ secrets.VERACODE_API_ID_2 }}
        VERACODE_API_ID_3: ${{ secrets.VERACODE_API_ID_3 }}
        VERACODE_API_ID_4: ${{ secrets.VERACODE_API_ID_4 }}
        VERACODE_API_KEY_0: ${{ secrets.VERACODE_API_KEY_0 }}
        VERACODE_API_KEY_1: ${{ secrets.VERACODE_API_KEY_1 }}
        VERACODE_API_KEY_2: ${{ secrets.VERACODE_API_KEY_2 }}
        VERACODE_API_KEY_3: ${{ secrets.VERACODE_API_KEY_3 }}
        VERACODE_API_KEY_4: ${{ secrets.VERACODE_API_KEY_4 }}
    - name: "Scan the project"
      id: veracode-pipeline-scan
      shell: bash
      run: |
          echo "Randomly picking 1 of 5 api keys, to help avoid veracode API rate limits."
          X=$(( RANDOM % 4 ))
          VERACODE_API_ID_X="VERACODE_API_ID_${X}"
          VERACODE_API_KEY_X="VERACODE_API_KEY_${X}"
          VERACODE_API_ID="${!VERACODE_API_ID_X}"
          VERACODE_API_KEY="${!VERACODE_API_KEY_X}"
          echo "Using VERACODE_API_ID_${X} from pool (${VERACODE_API_ID:0:5}...)"
          java -jar pipeline-scan.jar \
          $(test -f results.json && echo "--baseline_file results.json") \
          --json_output true \
          --file source.zip \
          --policy_file Ministry_of_Justice.json \
          --veracode_api_id "${VERACODE_API_ID}" \
          --veracode_api_key "${VERACODE_API_KEY}" \
          --timeout 60 \
          --issue_details false \
          --summary_output true
      continue-on-error: true
      env:
        VERACODE_API_ID_0: ${{ secrets.VERACODE_API_ID_0 }}
        VERACODE_API_ID_1: ${{ secrets.VERACODE_API_ID_1 }}
        VERACODE_API_ID_2: ${{ secrets.VERACODE_API_ID_2 }}
        VERACODE_API_ID_3: ${{ secrets.VERACODE_API_ID_3 }}
        VERACODE_API_ID_4: ${{ secrets.VERACODE_API_ID_4 }}
        VERACODE_API_KEY_0: ${{ secrets.VERACODE_API_KEY_0 }}
        VERACODE_API_KEY_1: ${{ secrets.VERACODE_API_KEY_1 }}
        VERACODE_API_KEY_2: ${{ secrets.VERACODE_API_KEY_2 }}
        VERACODE_API_KEY_3: ${{ secrets.VERACODE_API_KEY_3 }}
        VERACODE_API_KEY_4: ${{ secrets.VERACODE_API_KEY_4 }}
    - uses: actions/upload-artifact@v3
      id: veracode-artifact-upload
      if: success() 
      continue-on-error: true
      with:
        name: veracode-pipeline-check-${{ github.event.repository.name }}
        path: results.txt
    - name: send a failure slack message
      if: steps.veracode-pipeline-scan.outcome == 'failure' && inputs.channel_id != 'NO_SLACK'
      uses: ministryofjustice/hmpps-github-actions/.github/actions/slack_failure_results@0.2 # WORKFLOW_VERSION
      with:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        channel_id: ${{ inputs.channel_id }}
        input_file: results.txt

    - uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117 # v1.24.0
      if: steps.veracode-artifact-upload.conclusion == 'failure' && inputs.channel_id != 'NO_SLACK'
      with:
        channel-id: ${{ inputs.channel_id}}
        payload: |
          { "text": "Veracode pipeline scan failed",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":no_entry: Failed GitHub Action:"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Job:*\n${{ github.job }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Repo:*\n${{ github.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Project:*\n${{ github.event.repository.name }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
